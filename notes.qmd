---
title: "Introduction to Git"
format:
  html:
    self-contained: true
    theme: cosmo
---

## Notes / TODO

- Might make sense to include an "examples" folder with subfolders for each exercise
  with all the needed starting files? These could then also be used for examples during
  the presentation? Examples can include files, but not subfolder Git repositories.
  Any example that needs an existing repository could just use this repo? Any other example
  that needs eg a commit history the participants could create themselves. Repeating the
  basic commands many times is probably a good thing anyway.

- For each section in the notes, it will probably be a good idea to give some references
  to where the information is comming from.

  


## Download and install Git and Git BASH on Windows

### Download Git

It is recommended to download "Git for Windows" from [https://git-scm.com/downloads/win](https://git-scm.com/downloads/win).
Git for Windows includes the Git SCM and Git BASH along other tools. Git BASH
is a BASH emulation used to run GIT form the command line. Using Git BASH is preferable
over using Powershell (for most people), as Git BASH behaves just likes git commands
on LINUX and UNIX. Using Powershell is also a viable option, but it might require (TODO: make some tests myself?) some more technical knowledge on how things work.

### First-time Git setup

Describe how to setup Git after installing it. Look to Pro Git for inspiration.

git config stuff that should be done
- Identity : user.name and user.email.
- editor: dont use vim, it is scary. Switch to notepad or notepad++


## More indepth explaination on differnces between SVCS and DVCS's?
## GitHub

Talking about GitHub is probably not something we will touch upon in the presentation / during the seminar, since it is not something that will be used in day to day work. But there should probably
be some information on what it is in the notes.

## Git bash

Write a guide on how to use Git bash for Windows. A list of commands and such would be helpful.
Use material Benjamin has made as inspiration.

## Git internals

Some summarized notes on Git internals from Pro Git maybe. Might be of interest to some people,
but might primarily be of interest to myself / a good place to summarize some stuff that is 
easy to forget but important.

## I fucked up. How do I restore deleted/lost code?

Should for sure be a chapter on this.

## Best practices

Maybe some best practice advice?

- Make incremental small changes

- Only commit code (to master/dev/feature brances) that works as intended

- Write clear concise commit messages.

- Use a consistent branch strategy.


### Central versus distributed VCS's

Will probably not go into details in the presentation, but some extra notes might be
of interest. 

## Resources

Google

Manual pages: git help commands. Refer to these instead of docs on internet. These manpages
are always available offline.

Pro Git book [download](https://git-scm.com/book/en/v2)


