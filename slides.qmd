---
title: "Introduction to Git"
title-slide-attributes:
  data-background-image: ./diagrams/title-slide-background.svg
  data-background-size: 90%
  data-background-opacity: "0.5"
format:
  revealjs:
    embed-resources: true
---

```{r}
#| label: setup
#| echo: false
#| include: false

# library(tidyverse)
```

## Notes/TODO

- Incorporate a running example illustrating all the introduced concepts and commands.

- Split up the presentation into 3 separate presentations, once for each part? Might make
  everything a little more manageable? On the other hand it would be nice to have everything together in one file. Maybe only split up if compile times becomes irratingly long and/or file size
  becomes too big (whatever that would be)
## Overview

Part I - Introduction to Git

Part II - Using Git in practice

Part III - Advanced use of Git


## Part I - Introduction to Git

![](images/xkcd_git.png){width=30% fig-align="center"}

::: aside
https://xkcd.com/1597/
:::

## What is Git?

Git is a distributed version control system

Version control system: Software that tracks different versions of files

Distributed: There is no central repository. Each copy of the codebase contains the
entire history of versions of files.

::: {.notes}
Git is a distributed version control system (DVCS). A version control system (VCS)
is aprogram that tracks different version of files. In a *distributed* VCS there is
no contral repository where the code lives. Each copy of the codebase contrains
the entire history of version of files. In many contexts this is vastly superior
to earlier *centralized* VCS, where there is a central codebase from which
code is copied.
:::


## Why bother?

Why not do version control manually by eg saving version of code in folders with
a datestamp or something similar?

Advantages of using Git.

- More rigorous than making folders with old versions of code.

- Makes it easy to switch back and forth between different versions of files

- Makes it easy to see precise differences of versions of code

- Enhances collaboration on codebase by multiple persons


::: {.notes}

:::


## Setup

So how do we get started:

- Download Git for windows

- Configure Git Bash


::: {.notes}
We assume that the reader has already installed Git for Windows and has configured
the Git Bash (set user credentials and default editor). If not, see notes document for a guide.
:::


## Some Git technical stuff

at this point it is probably time to explain some of the basic concepts in Git, eg the
work directory / staging / history, and introduce init/add/commit commands? We only need these
3 commands to get started right?

Next up we should start the running example, and then introduce git log so that we can 
visualize the history of commits.

At this point we already know enough to use Git in practice in a real project in a simple meaningful way?






## TODO

  - Using Git Bash. Just do it. Powershell would technically be an alternative. All git commands
    would work but you would (probably) not be able to do other kinds of basic commands that is
    not Git?
  - Setup/configuration of Git? git config stuff? Using Git Bash
  - Basic Git usage. Introduce commands with running example?
  - The three stages
  - More technical command
  - Running example that is live coded to show off introduced concepts?
  - Basic exercises playing around with the basic commands


## Part II

- Part II: Using git in day to day work
  - Simple ways of using Git in projects
  - Initialize a repository in an existing directory
  - Branching
  - Exercises meant to illustrate a simple but good workflow

## Part III

Probably not time for this, but some of it will probably come up in discussions
anyway, maybe there is time to talk about some of it

- Part III: Advanced use
  - Advanced commands. Like reset, rebase, diff etc
  - remotes
  - GitHub
  - aliases. can/should maybe be included in part I
  - Collaboration on a codebase
  - Distributed workflows / Git flow / whatever something about having a plan on how to do things.
  - Why use specifically Git? Are there any alternatives? See eg Pro Git chapter 1
  - Git GUI/IDE's. What are popular choices. Pro's and con's over using only Git Bash. Specifically
    Git versus Subversion.
  - Version controlling output. Can it be justified in practice? Always better to only version-control code?
  - What to do when you royally fuck up? Talk about minimizing deleting code using remotes and proper
    work flows. 
 
  
## Git commit history diagram test


```{mermaid}
gitGraph
   commit
   commit
   branch develop
   checkout develop
   commit
   commit
   checkout main
   merge develop
   commit
   commit
```



